included: # paths to include during linting. `--path` is ignored if present.
  - Logistics 
  - LogisticsKit

# Turn off default SwiftLint rules
disabled_rules:
  - trailing_whitespace # Disables SwiftLint complaining about whitespace characters on empty lines
  - nesting
  - type_body_length
  - identifier_name
  - multiline_function_chains
  - array_init
  - attributes
  - discouraged_optional_boolean
  - function_default_parameter_at_end
  - vertical_parameter_alignment_on_call
  
# Turn on extra SwiftLint rules
opt_in_rules:
  - array_init
  - attributes
  - closure_end_indentation
  - closure_spacing
  - contains_over_first_not_nil
  - convenience_type
  - discouraged_optional_boolean
  - empty_count
  - empty_string
  - empty_xctest_method
  - explicit_init
  - fallthrough
  - fatal_error_message
  - first_where
  - force_unwrapping
  - function_default_parameter_at_end
  - implicit_return
  - implicitly_unwrapped_optional
  - joined_default_parameter
  - let_var_whitespace
  - literal_expression_end_indentation
  - modifier_order
  - multiline_function_chains
  - multiline_parameters
  - object_literal
  - operator_usage_whitespace
  - overridden_super_call
  - override_in_extension
  - pattern_matching_keywords
  - private_action
  - private_outlet
  - prohibited_super_call
  - redundant_nil_coalescing
  - required_enum_case
  - single_test_class
  - sorted_first_last
  - sorted_imports
  - strict_fileprivate
  - switch_case_on_newline
  - unavailable_function
  - unneeded_parentheses_in_closure_argument
  - vertical_parameter_alignment_on_call
  - yoda_condition

# Omit directories from SwiftLint checks
excluded:
  - Pods # Don't lint anything coming in through Cocoapods
  - Legacy

# Custom rules
custom_rules:
  # Warns for usage of improper year format (e.g. MM/dd/YYYY instead of MM/dd/yyyy)
  YYYY_considered_harmful: # rule identifier
    name: "YYYY considered harmful" # rule name. optional.
    regex: "(YYYY)" # matching pattern
    message: "YYYY means week-year; you probably want yyyy" # violation message. optional.
    severity: error # violation severity. optional.
  swiftgen_assets:
    name: "SwiftGen Assets"
    regex: '(UIImage|UIColor)(\.init)?\(named: ?"?.+"?(, ?in:.+?, ?compatibleWith:.+?)?\)|#imageLiteral\(resourceName: ?".+"\)'
    message: "Use Asset.<asset> instead"
    severity: error
  swiftgen_colors:
    name: "SwiftGen Colors"
    regex: '(UIColor(\.init)?|#colorLiteral)\(((red|displayP3Red):.+?,green:.+?,blue:.+?,alpha:.+?)|(white:.+?,alpha:.+?)|(hue:.+?,saturation:.+?,brightness:.+?,alpha:.+?)\)'
    message: "Use ColorName.<color> instead"
    severity: error
  swiftgen_fonts:
    name: "SwiftGen Fonts"
    regex: 'UIFont(\.init)?\(name: ?"?.+"?, ?size:.+?\)'
    message: "Use FontFamily.<family>.<variant>.size(<size>) instead"
    severity: error
  swiftgen_storyboards:
    name: "SwiftGen Storyboard Scenes"
    regex: '(UIStoryboard\(name: ?"?.+"?, ?bundle:.+\))|(instantiateViewController\(withIdentifier:.+?\))|(instantiateInitialViewController\(\))'
    message: "Use StoryboardScene.<storyboad>.<scene>.instantiate() instead"
    severity: error
  swiftgen_strings:
    name: "SwiftGen Strings"
    regex: 'NSLocalizedString'
    message: "Use L10n.key instead"
    severity: error
  swiftui_assets:
    name: "SwiftUI Assets"
    regex: '(Image|Color)\(+"+.*"+\)'
    message: "Use Image.<asset> or Color.<asset> instead"
    severity: error
  swiftui_strings:
    name: "SwiftUI Strings"
    regex: '(Text)\(+"+.*"+\)'
    message: "Use Text(L10n.key) instead"
    severity: error

# Rule configuration
line_length: 400 # Max line length before warning (default is 120)
file_length: 500
function_body_length: 64
cyclomatic_complexity: 13
function_parameter_count: 10
